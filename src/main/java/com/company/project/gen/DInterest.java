package com.company.project.gen;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DInterest extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b5060405162004e1038038062004e1083398101604081905262000034916200057c565b6000805460ff19166001178155620000546001600160e01b036200048016565b60008054610100600160a81b0319166101006001600160a01b038416908102919091178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620000c5886001600160a01b03166200048460201b6200276a1760201c565b8015620000ec5750620000ec876001600160a01b03166200048460201b6200276a1760201c565b801562000113575062000113866001600160a01b03166200048460201b6200276a1760201c565b80156200013a57506200013a856001600160a01b03166200048460201b6200276a1760201c565b801562000161575062000161846001600160a01b03166200048460201b6200276a1760201c565b801562000188575062000188836001600160a01b03166200048460201b6200276a1760201c565b8015620001af5750620001af826001600160a01b03166200048460201b6200276a1760201c565b8015620001d65750620001d6816001600160a01b03166200048460201b6200276a1760201c565b620001fe5760405162461bcd60e51b8152600401620001f59062000863565b60405180910390fd5b600c80546001600160a01b03199081166001600160a01b038b81169190911792839055600d805483168b8316908117909155600e805484168b8416179055600f805484168a84161790556010805484168984161790556011805484168884161790556012805484168784161790556013805490931685831617909255604080516374e5ec1160e11b8152905192939091169163e9cbd82291600480820192602092909190829003018186803b158015620002b757600080fd5b505afa158015620002cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002f291908101906200055b565b6001600160a01b0316146200031b5760405162461bcd60e51b8152600401620001f59062000875565b6010546040805163d6d75f5160e01b815290516001600160a01b03808c1693169163d6d75f51916004808301926020929190829003018186803b1580156200036257600080fd5b505afa15801562000377573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200039d91908101906200055b565b6001600160a01b031614620003c65760405162461bcd60e51b8152600401620001f59062000887565b60008960200151118015620003df575060008960600151115b620003fe5760405162461bcd60e51b8152600401620001f59062000851565b602089015189511115620004265760405162461bcd60e51b8152600401620001f5906200082d565b886060015189604001511115620004515760405162461bcd60e51b8152600401620001f5906200083f565b5050865160065550505060208401516007555050506040810151600855606001516009556000600a5562000903565b3390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590620004b957508115155b949350505050565b8051620004ce81620008de565b92915050565b600060808284031215620004e757600080fd5b620004f3608062000899565b905060006200050384846200054e565b825250602062000516848483016200054e565b60208301525060406200052c848285016200054e565b604083015250606062000542848285016200054e565b60608301525092915050565b8051620004ce81620008f8565b6000602082840312156200056e57600080fd5b6000620004b98484620004c1565b60008060008060008060008060006101808a8c0312156200059c57600080fd5b6000620005aa8c8c620004d4565b9950506080620005bd8c828d01620004c1565b98505060a0620005d08c828d01620004c1565b97505060c0620005e38c828d01620004c1565b96505060e0620005f68c828d01620004c1565b9550506101006200060a8c828d01620004c1565b9450506101206200061e8c828d01620004c1565b935050610140620006328c828d01620004c1565b925050610160620006468c828d01620004c1565b9150509295985092959850929598565b600062000665602683620008c0565b7f44496e7465726573743a20496e76616c6964204465706f736974506572696f648152652072616e676560d01b602082015260400192915050565b6000620006af602683620008c0565b7f44496e7465726573743a20496e76616c6964204465706f736974416d6f756e748152652072616e676560d01b602082015260400192915050565b6000620006f9602083620008c0565b7f44496e7465726573743a20416e20696e7075742075696e743235362069732030815260200192915050565b600062000734602d83620008c0565b7f44496e7465726573743a20416e20696e7075742061646472657373206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b602082015260400192915050565b600062000785603283620008c0565b7f44496e7465726573743a206d6f6e65794d61726b65742e737461626c65636f6981527137141490109e902fb9ba30b13632b1b7b4b760711b602082015260400192915050565b6000620007db603783620008c0565b7f44496e7465726573743a20696e7465726573744f7261636c652e6d6f6e65794d81527f61726b6574282920213d205f6d6f6e65794d61726b6574000000000000000000602082015260400192915050565b60208082528101620004ce8162000656565b60208082528101620004ce81620006a0565b60208082528101620004ce81620006ea565b60208082528101620004ce8162000725565b60208082528101620004ce8162000776565b60208082528101620004ce81620007cc565b6040518181016001600160401b0381118282101715620008b857600080fd5b604052919050565b90815260200190565b60006001600160a01b038216620004ce565b90565b620008e981620008c9565b8114620008f557600080fd5b50565b620008e981620008db565b6144fd80620009136000396000f3fe608060405234801561001057600080fd5b50600436106103425760003560e01c8063a5a9504e116101b8578063cf8bb3e811610104578063e9cbd822116100a2578063f154240a1161007c578063f154240a1461065c578063f20b1c7614610664578063f2fde38b14610677578063f6153ccd1461068a57610342565b8063e9cbd82214610621578063ebed4bd414610629578063ec38a8621461064957610342565b8063d816bd7f116100de578063d816bd7f146105e0578063e2bbb158146105f3578063e3d075df14610606578063e7dd55db1461061957610342565b8063cf8bb3e8146105bd578063d2402b19146105d0578063d6d75f51146105d857610342565b8063bb59f11a11610171578063c07b767d1161014b578063c07b767d1461057c578063c4511c6a14610584578063ca538ada14610597578063cddc23ce146105aa57610342565b8063bb59f11a1461054e578063bc135d7514610556578063c016cfd61461056957610342565b8063a5a9504e146104fd578063ac165d7a14610510578063aea62e3f14610518578063af13a23e1461052b578063b1710a621461053e578063b817b51e1461054657610342565b80635fef1465116102925780638f168c9311610230578063956087c11161020a578063956087c1146104af57806397ee1144146104c25780639f9fb968146104ca578063a5783afa146104ea57610342565b80638f168c931461048a5780638f32d59b14610492578063939156a2146104a757610342565b80636e3f5d521161026c5780636e3f5d5214610447578063715018a61461045a5780637aebdce6146104625780638da5cb5b1461047557610342565b80635fef146514610419578063619c5cb71461042c57806367e3c4d41461043f57610342565b8063259fc70f116102ff578063441a3e70116102d9578063441a3e70146103e357806351521805146103f657806352f3da231461040957806359b822661461041157610342565b8063259fc70f146103b35780632a80cda3146103bb5780632fc082ff146103ce57610342565b8063029eeaa814610347578063037b6b0d1461035c57806308b856d71461037a57806313888565146103825780632125b9841461039857806321eede69146103ab575b600080fd5b61035a61035536600461349d565b610692565b005b610364610a6b565b604051610371919061436e565b60405180910390f35b610364610a71565b61038a610a78565b604051610371929190614152565b61035a6103a636600461345b565b610b6a565b610364610bf6565b610364610bfc565b61035a6103c936600461349d565b610c02565b6103d6610cb1565b6040516103719190614160565b61035a6103f136600461352f565b610cc0565b61035a610404366004613393565b610d0a565b610364610dbc565b610364610ec2565b61035a61042736600461349d565b610ec8565b61035a61043a36600461345b565b610f1f565b6103d6610f75565b61035a610455366004613357565b610f84565b61035a61103e565b61035a61047036600461352f565b6110b1565b61047d6110e9565b604051610371919061400a565b6103646110fd565b61049a611103565b6040516103719190614144565b6103d661112c565b61035a6104bd3660046134d9565b61113b565b6103d66111ca565b6104dd6104d836600461349d565b6111d9565b6040516103719190614351565b61038a6104f836600461349d565b611286565b61035a61050b366004613357565b6113a3565b6103d661141c565b61035a610526366004613393565b61142b565b61049a61053936600461349d565b6114c9565b61035a6114d1565b61036461173d565b6103646117c0565b61036461056436600461352f565b6117c6565b61035a61057736600461345b565b6118ea565b610364611940565b61035a61059236600461349d565b611946565b61035a6105a536600461349d565b6119a9565b61035a6105b8366004613357565b611a0c565b61035a6105cb366004613393565b611a85565b610364611b21565b6103d6611b27565b61035a6105ee3660046134d9565b611b36565b61035a61060136600461352f565b611b8e565b61035a61061436600461345b565b611bc4565b6103d6611c1a565b6103d6611c29565b61063c61063736600461349d565b611c38565b6040516103719190614360565b61035a610657366004613357565b611caf565b610364611d6f565b61035a610672366004613357565b611d75565b61035a610685366004613357565b611e92565b610364611ec2565b60005460ff166106bd5760405162461bcd60e51b81526004016106b490614321565b60405180910390fd5b6000805460ff1916905560025481116106e85760405162461bcd60e51b81526004016106b4906142e1565b60015481111561070a5760405162461bcd60e51b81526004016106b4906141e1565b600080610715610a78565b91509150816107365760405162461bcd60e51b81526004016106b4906142b1565b60025460009081908190819061075390600163ffffffff611ec816565b90505b86811161082557600061076882611ef4565b600481015490915060ff161561078b5761078182611286565b90975095506107a3565b6004810154600582015461010090910460ff16975095505b86156107c0576107b9858763ffffffff611ec816565b94506107d3565b6107d0848763ffffffff611ec816565b93505b600481015460ff161561080c576002810154815461080991906107fd90869063ffffffff611ec816565b9063ffffffff611ec816565b92505b5061081e81600163ffffffff611ec816565b9050610756565b508282106108455760405162461bcd60e51b81526004016106b4906141a1565b610855838363ffffffff611f2716565b9250600c546040805163010e130960e51b815290516000926001600160a01b0316916321c2612091600480830192602092919082900301818787803b15801561089d57600080fd5b505af11580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108d591908101906134bb565b9050600081116108f75760405162461bcd60e51b81526004016106b4906142c1565b6040805160a0810182526002548152602081018981529181018481526060820184815242608084019081526004805460018101825560009190915293517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b60059095029485015593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c84015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f90910155610a2e610a1f82610a13856b033b2e3c9fd0803ce8000000611f69565b9063ffffffff611fa316565b6005549063ffffffff611ec816565b6005556002879055600354610a49908363ffffffff611f2716565b600355610a5584611fe5565b50506000805460ff191660011790555050505050565b60095481565b6004545b90565b6000806000600c60009054906101000a90046001600160a01b03166001600160a01b031663d4c3eea06040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610acd57600080fd5b505af1158015610ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b0591908101906134bb565b90506000610b29610b14610dbc565b600b54600a546107fd9163ffffffff611ec816565b9050808210610b4d5760009350610b46828263ffffffff611f2716565b9250610b64565b60019350610b61818363ffffffff611f2716565b92505b50509091565b610b72611103565b610b8e5760405162461bcd60e51b81526004016106b4906142a1565b6011546040516355f804b360e01b81526001600160a01b03909116906355f804b390610bc0908590859060040161416e565b600060405180830381600087803b158015610bda57600080fd5b505af1158015610bee573d6000803e3d6000fd5b505050505050565b60025481565b60075481565b610c0a611103565b610c265760405162461bcd60e51b81526004016106b4906142a1565b6009548111158015610c385750600081115b610c545760405162461bcd60e51b81526004016106b4906141b1565b6008819055604051610c6590613fd3565b6040518091039020336001600160a01b03167ff37f82a82443ce2d0a9a47ee78cef1a46975e3f33782fcb8caf315626b73a3d483604051610ca6919061436e565b60405180910390a350565b6010546001600160a01b031681565b60005460ff16610ce25760405162461bcd60e51b81526004016106b490614321565b6000805460ff19168155610cf99083908390612131565b50506000805460ff19166001179055565b60005460ff16610d2c5760405162461bcd60e51b81526004016106b490614321565b6000805460ff19169055828114610d555760405162461bcd60e51b81526004016106b490614211565b60005b83811015610da857610d90858583818110610d6f57fe5b90506020020135848484818110610d8257fe5b905060200201356001612131565b610da181600163ffffffff611ec816565b9050610d58565b50506000805460ff19166001179055505050565b600080610e696b033b2e3c9fd0803ce8000000610a13600554600c60009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e2557600080fd5b505af1158015610e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e5d91908101906134bb565b9063ffffffff611f6916565b90506000610e96600354610e8a600b54600a54611ec890919063ffffffff16565b9063ffffffff611f2716565b905080821015610eab57600092505050610a75565b610ebb828263ffffffff611f2716565b9250505090565b60055481565b610ed0611103565b610eec5760405162461bcd60e51b81526004016106b4906142a1565b600754811115610f0e5760405162461bcd60e51b81526004016106b4906141b1565b6006819055604051610c6590613fde565b610f27611103565b610f435760405162461bcd60e51b81526004016106b4906142a1565b60125460405163938e3d7b60e01b81526001600160a01b039091169063938e3d7b90610bc0908590859060040161416e565b6011546001600160a01b031681565b610f8c611103565b610fa85760405162461bcd60e51b81526004016106b4906142a1565b610fba816001600160a01b031661276a565b610fd65760405162461bcd60e51b81526004016106b490614301565b600f80546001600160a01b0319166001600160a01b038316179055604051610ffd90613fbd565b6040518091039020336001600160a01b03167f64b03eb8356730cffd396927eec0e9b1e0599498960e022df3dae35791c17cf583604051610ca6919061400a565b611046611103565b6110625760405162461bcd60e51b81526004016106b4906142a1565b600080546040516101009091046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360008054610100600160a81b0319169055565b60005460ff166110d35760405162461bcd60e51b81526004016106b490614321565b6000805460ff19169055610cf982826001612131565b60005461010090046001600160a01b031690565b600b5481565b6000805461010090046001600160a01b031661111d6127a6565b6001600160a01b031614905090565b6012546001600160a01b031681565b611143611103565b61115f5760405162461bcd60e51b81526004016106b4906142a1565b601254604051630588253160e21b81526001600160a01b039091169063162094c4906111939086908690869060040161437c565b600060405180830381600087803b1580156111ad57600080fd5b505af11580156111c1573d6000803e3d6000fd5b50505050505050565b600e546001600160a01b031681565b6111e1613216565b60016111f3838263ffffffff611f2716565b815481106111fd57fe5b6000918252602091829020604080516101208101825260089093029091018054835260018101549383019390935260028301549082015260038201546060820152600482015460ff808216151560808401526101009182900416151560a0830152600583015460c0830152600683015460e0830152600790920154918101919091529050919050565b600080600061129484611ef4565b90506000600c60009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061132091908101906134bb565b905060006113438360030154610a13848660000154611f6990919063ffffffff16565b6002840154845491925060009161135f9163ffffffff611ec816565b9050808210611383576000955061137c828263ffffffff611f2716565b945061139a565b60019550611397818363ffffffff611f2716565b94505b50505050915091565b6113ab611103565b6113c75760405162461bcd60e51b81526004016106b4906142a1565b6113d9816001600160a01b031661276a565b6113f55760405162461bcd60e51b81526004016106b490614301565b600e80546001600160a01b0319166001600160a01b038316179055604051610ffd90613fa7565b600f546001600160a01b031681565b60005460ff1661144d5760405162461bcd60e51b81526004016106b490614321565b6000805460ff191690558281146114765760405162461bcd60e51b81526004016106b490614211565b60005b83811015610da8576114b185858381811061149057fe5b905060200201358484848181106114a357fe5b905060200201356000612131565b6114c281600163ffffffff611ec816565b9050611479565b600254101590565b60005460ff166114f35760405162461bcd60e51b81526004016106b490614321565b6000805460ff1916815580611506610a78565b91509150816115275760405162461bcd60e51b81526004016106b4906142b1565b600154611533906114c9565b156115505760405162461bcd60e51b81526004016106b490614191565b600c546040805163010e130960e51b815290516000926001600160a01b0316916321c2612091600480830192602092919082900301818787803b15801561159657600080fd5b505af11580156115aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115ce91908101906134bb565b9050600081116115f05760405162461bcd60e51b81526004016106b4906142c1565b6040805160a081018252600254815260018054602083019081526003805494840194855260608401868152426080860190815260048054958601815560005294517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b60059095029485015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c84015593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f909101555461171490610a1f908390610a13906b033b2e3c9fd0803ce8000000611f69565b600555600154600255600060035561172b82611fe5565b50506000805460ff1916600117905550565b600c546040805163010e130960e51b815290516000926001600160a01b0316916321c2612091600480830192602092919082900301818787803b15801561178357600080fd5b505af1158015611797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117bb91908101906134bb565b905090565b60035481565b601054604080516385b3a93160e01b8152815160009384936001600160a01b03909116926385b3a931926004808301939282900301818787803b15801561180c57600080fd5b505af1158015611820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118449190810190613421565b915050600080611852610a78565b600f5460405163684df1a760e11b81529294509092506001600160a01b03169063d09be34e9061188e90899089908890889088906004016143b8565b60206040518083038186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118de91908101906134bb565b93505050505b92915050565b6118f2611103565b61190e5760405162461bcd60e51b81526004016106b4906142a1565b60115460405163938e3d7b60e01b81526001600160a01b039091169063938e3d7b90610bc0908590859060040161416e565b60065481565b61194e611103565b61196a5760405162461bcd60e51b81526004016106b4906142a1565b600854811015801561197c5750600081115b6119985760405162461bcd60e51b81526004016106b4906141b1565b6009819055604051610c6590613ff4565b6119b1611103565b6119cd5760405162461bcd60e51b81526004016106b4906142a1565b60065481101580156119df5750600081115b6119fb5760405162461bcd60e51b81526004016106b4906141b1565b6007819055604051610c6590613fc8565b611a14611103565b611a305760405162461bcd60e51b81526004016106b4906142a1565b611a42816001600160a01b031661276a565b611a5e5760405162461bcd60e51b81526004016106b490614301565b601380546001600160a01b0319166001600160a01b038316179055604051610ffd90613fe9565b60005460ff16611aa75760405162461bcd60e51b81526004016106b490614321565b6000805460ff19169055828114611ad05760405162461bcd60e51b81526004016106b490614211565b60005b83811015610da857611b09858583818110611aea57fe5b90506020020135848484818110611afd57fe5b905060200201356127aa565b611b1a81600163ffffffff611ec816565b9050611ad3565b60085481565b600c546001600160a01b031681565b611b3e611103565b611b5a5760405162461bcd60e51b81526004016106b4906142a1565b601154604051630588253160e21b81526001600160a01b039091169063162094c4906111939086908690869060040161437c565b60005460ff16611bb05760405162461bcd60e51b81526004016106b490614321565b6000805460ff19169055610cf982826127aa565b611bcc611103565b611be85760405162461bcd60e51b81526004016106b4906142a1565b6012546040516355f804b360e01b81526001600160a01b03909116906355f804b390610bc0908590859060040161416e565b6013546001600160a01b031681565b600d546001600160a01b031681565b611c40613266565b6004611c5383600163ffffffff611f2716565b81548110611c5d57fe5b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b611cb7611103565b611cd35760405162461bcd60e51b81526004016106b4906142a1565b611ce5816001600160a01b031661276a565b611d015760405162461bcd60e51b81526004016106b490614301565b600c5460405163761c543160e11b81526001600160a01b039091169063ec38a86290611d3190849060040161400a565b600060405180830381600087803b158015611d4b57600080fd5b505af1158015611d5f573d6000803e3d6000fd5b50505050604051610ffd90613fb2565b60015490565b611d7d611103565b611d995760405162461bcd60e51b81526004016106b4906142a1565b611dab816001600160a01b031661276a565b611dc75760405162461bcd60e51b81526004016106b490614301565b601080546001600160a01b0319166001600160a01b038381169190911791829055600c546040805163d6d75f5160e01b81529051918316939092169163d6d75f51916004808301926020929190829003018186803b158015611e2857600080fd5b505afa158015611e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e609190810190613375565b6001600160a01b031614611e865760405162461bcd60e51b81526004016106b4906141c1565b604051610ffd90613fff565b611e9a611103565b611eb65760405162461bcd60e51b81526004016106b4906142a1565b611ebf81612bd9565b50565b600a5481565b600082820183811015611eed5760405162461bcd60e51b81526004016106b490614201565b9392505050565b60006001611f08838263ffffffff611f2716565b81548110611f1257fe5b90600052602060002090600802019050919050565b6000611eed83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612c65565b600082611f78575060006118e4565b82820282848281611f8557fe5b0414611eed5760405162461bcd60e51b81526004016106b490614291565b6000611eed83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612c91565b600d54612003906001600160a01b031633308463ffffffff612cc816565b600c54600d54612026916001600160a01b0391821691168363ffffffff612d2916565b600c5460405163b6b55f2560e01b81526001600160a01b039091169063b6b55f259061205690849060040161436e565b600060405180830381600087803b15801561207057600080fd5b505af1158015612084573d6000803e3d6000fd5b5050601254600480546040516340c10f1960e01b81526001600160a01b0390931694506340c10f1993506120ba92339201614018565b600060405180830381600087803b1580156120d457600080fd5b505af11580156120e8573d6000803e3d6000fd5b505060045460405190925082915033907fb03542817f50f5c2413ab7023425536491098da0d40edaf6b3daeb10f69d922e9061212590869061436e565b60405180910390a35050565b600061213c84611ef4565b600481015490915060ff166121635760405162461bcd60e51b81526004016106b490614241565b60048101805460ff1916905581156121c057806001015442106121985760405162461bcd60e51b81526004016106b4906142f1565b806007015442116121bb5760405162461bcd60e51b81526004016106b490614331565b6121e4565b80600101544210156121e45760405162461bcd60e51b81526004016106b490614261565b6011546040516331a9108f60e11b815233916001600160a01b031690636352211e9061221490889060040161436e565b60206040518083038186803b15801561222c57600080fd5b505afa158015612240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122649190810190613375565b6001600160a01b03161461228a5760405162461bcd60e51b81526004016106b4906142d1565b60135460068201546040516319717aa560e21b81526000926001600160a01b0316916365c5ea94916122c29133918890600401614033565b602060405180830381600087803b1580156122dc57600080fd5b505af11580156122f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061231491908101906134bb565b90508385336001600160a01b03167ffa1c3f2020dd155614d78b1648966f6b1079921cb29a52e26eb48b67c8cae7cd8685604051612353929190614152565b60405180910390a4508054600a546123709163ffffffff611f2716565b600a556002810154600b5461238a9163ffffffff611f2716565b600b55600c546040805163010e130960e51b815290516000926001600160a01b0316916321c2612091600480830192602092919082900301818787803b1580156123d357600080fd5b505af11580156123e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061240b91908101906134bb565b90506000811161242d5760405162461bcd60e51b81526004016106b4906141f1565b60008061243987611286565b91509150600080861561244e575084546124ee565b600e546002870154604051633f3b917d60e21b81526001600160a01b039092169163fcee45f4916124819160040161436e565b60206040518083038186803b15801561249957600080fd5b505afa1580156124ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124d191908101906134bb565b600287015487549193506124eb919063ffffffff611ec816565b90505b600c54604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d9061251e90849060040161436e565b602060405180830381600087803b15801561253857600080fd5b505af115801561254c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061257091908101906134bb565b905061259f33612586838563ffffffff611f2716565b600d546001600160a01b0316919063ffffffff612dd216565b600e54604080516338af3eed60e01b81529051612636926001600160a01b0316916338af3eed916004808301926020929190829003018186803b1580156125e557600080fd5b505afa1580156125f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061261d9190810190613375565b600d546001600160a01b0316908463ffffffff612dd216565b5050846126e6576013548454600786015460018701546001600160a01b039093169263b83ef483929161266f919063ffffffff611f2716565b87600201546040518463ffffffff1660e01b81526004016126929392919061439d565b602060405180830381600087803b1580156126ac57600080fd5b505af11580156126c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126e491908101906134bb565b505b6126ef876114c9565b1561271657612711868886600001548760010154886002015487878a8d612df9565b6111c1565b6002840154845461274091612731919063ffffffff611ec816565b6003549063ffffffff611f2716565b6003556004840180548315156101000261ff00199091161790556005840181905550505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061279e57508115155b949350505050565b3390565b60085482101580156127be57506009548211155b6127da5760405162461bcd60e51b81526004016106b490614231565b60006127ec824263ffffffff611f2716565b9050600654811015801561280257506007548111155b61281e5760405162461bcd60e51b81526004016106b490614271565b600a54612831908463ffffffff611ec816565b600a55600061284084836117c6565b9050600081116128625760405162461bcd60e51b81526004016106b490614281565b60018054600091612879919063ffffffff611ec816565b9050612894826107fd87600354611ec890919063ffffffff16565b600355600b546128aa908363ffffffff611ec816565b600b55601354604051635b4c5e4360e11b81526000916001600160a01b03169063b698bc86906128e49033908a908990899060040161405b565b602060405180830381600087803b1580156128fe57600080fd5b505af1158015612912573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061293691908101906134bb565b90506001604051806101200160405280888152602001878152602001858152602001600c60009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156129a857600080fd5b505af11580156129bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129e091908101906134bb565b81526001602080830182905260006040808501829052606080860183905260808087018a90524260a09788015288548087018a55988452928490208751600890990201978855928601519387019390935591840151600286015583015160038501558201516004840180549284015160ff199093169115159190911761ff001916610100921515830217905560c0820151600584015560e082015160068401550151600790910155600d54612aa0906001600160a01b0316333089612cc8565b600c54600d54612ac3916001600160a01b0391821691168863ffffffff612d2916565b600c5460405163b6b55f2560e01b81526001600160a01b039091169063b6b55f2590612af390899060040161436e565b600060405180830381600087803b158015612b0d57600080fd5b505af1158015612b21573d6000803e3d6000fd5b50506011546040516340c10f1960e01b81526001600160a01b0390911692506340c10f199150612b579033908690600401614018565b600060405180830381600087803b158015612b7157600080fd5b505af1158015612b85573d6000803e3d6000fd5b5050505081336001600160a01b03167f732ec50d46689f84d1ff0eba004a7affafc5460739dc8780d4d44c81611ace4088888786604051612bc99493929190614404565b60405180910390a3505050505050565b6001600160a01b038116612bff5760405162461bcd60e51b81526004016106b4906141d1565b600080546040516001600160a01b038085169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60008184841115612c895760405162461bcd60e51b81526004016106b49190614180565b505050900390565b60008183612cb25760405162461bcd60e51b81526004016106b49190614180565b506000838581612cbe57fe5b0495945050505050565b604051612d239085906323b872dd60e01b90612cec908790879087906024016140b4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526130fd565b50505050565b6000612dad82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b8152600401612d5d929190614099565b60206040518083038186803b158015612d7557600080fd5b505afa158015612d89573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107fd91908101906134bb565b604051909150612d2390859063095ea7b360e01b90612cec90879086906024016140dc565b604051612df490849063a9059cbb60e01b90612cec90869086906024016140dc565b505050565b6000612e048a6131e2565b805490915089118015612e1b575080600101548911155b612e375760405162461bcd60e51b81526004016106b490614251565b60028101546003820154600091612e5c91610e8a90610a13838963ffffffff611f6916565b9050612e9b612e8c8360030154610a136b033b2e3c9fd0803ce80000008660020154611f6990919063ffffffff16565b6005549063ffffffff611f2716565b600555612ec2612eb18a8963ffffffff611ec816565b60028401549063ffffffff611f2716565b6002830181905560038301859055612ef690610a1f908690610a13906b033b2e3c9fd0803ce800000063ffffffff611f6916565b6005556012546040516331a9108f60e11b81526000916001600160a01b031690636352211e90612f2a908f9060040161436e565b60206040518083038186803b158015612f4257600080fd5b505afa158015612f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f7a9190810190613375565b90506000848015612f885750875b612f925782612fa2565b612fa2838863ffffffff611ec816565b9050801561304c57600c54604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90612fda90849060040161436e565b602060405180830381600087803b158015612ff457600080fd5b505af1158015613008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061302c91908101906134bb565b600d5490915061304c906001600160a01b0316838363ffffffff612dd216565b601360009054906101000a90046001600160a01b03166001600160a01b03166326d70211838d87600401548e888b6040518763ffffffff1660e01b815260040161309b969594939291906140ea565b602060405180830381600087803b1580156130b557600080fd5b505af11580156130c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506130ed91908101906134bb565b5050505050505050505050505050565b61310f826001600160a01b031661276a565b61312b5760405162461bcd60e51b81526004016106b490614341565b60006060836001600160a01b0316836040516131479190613f9b565b6000604051808303816000865af19150503d8060008114613184576040519150601f19603f3d011682016040523d82523d6000602084013e613189565b606091505b5091509150816131ab5760405162461bcd60e51b81526004016106b490614221565b805115612d2357808060200190516131c69190810190613403565b612d235760405162461bcd60e51b81526004016106b490614311565b600060046131f783600163ffffffff611f2716565b8154811061320157fe5b90600052602060002090600502019050919050565b604051806101200160405280600081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b80356118e481614494565b80516118e481614494565b60008083601f8401126132bd57600080fd5b50813567ffffffffffffffff8111156132d557600080fd5b6020830191508360208202830111156132ed57600080fd5b9250929050565b80516118e4816144a8565b60008083601f84011261331157600080fd5b50813567ffffffffffffffff81111561332957600080fd5b6020830191508360018202830111156132ed57600080fd5b80356118e4816144b1565b80516118e4816144b1565b60006020828403121561336957600080fd5b600061279e8484613295565b60006020828403121561338757600080fd5b600061279e84846132a0565b600080600080604085870312156133a957600080fd5b843567ffffffffffffffff8111156133c057600080fd5b6133cc878288016132ab565b9450945050602085013567ffffffffffffffff8111156133eb57600080fd5b6133f7878288016132ab565b95989497509550505050565b60006020828403121561341557600080fd5b600061279e84846132f4565b6000806040838503121561343457600080fd5b600061344085856132f4565b92505060206134518582860161334c565b9150509250929050565b6000806020838503121561346e57600080fd5b823567ffffffffffffffff81111561348557600080fd5b613491858286016132ff565b92509250509250929050565b6000602082840312156134af57600080fd5b600061279e8484613341565b6000602082840312156134cd57600080fd5b600061279e848461334c565b6000806000604084860312156134ee57600080fd5b60006134fa8686613341565b935050602084013567ffffffffffffffff81111561351757600080fd5b613523868287016132ff565b92509250509250925092565b6000806040838503121561354257600080fd5b600061354e8585613341565b925050602061345185828601613341565b61356881614440565b82525050565b61356881614424565b6135688161442f565b600061358b82614412565b6135958185614416565b93506135a581856020860161445e565b9290920192915050565b61356881614447565b60006135c4838561441b565b93506135d1838584614452565b6135da8361448a565b9093019392505050565b60006135ef82614412565b6135f9818561441b565b935061360981856020860161445e565b6135da8161448a565b600061361f601e8361441b565b7f44496e7465726573743a20416c6c206465706f736974732066756e6465640000815260200192915050565b600061365860278361441b565b7f44496e7465726573743a2053656c6563746564206465706f7369747320696e20815266737572706c757360c81b602082015260400192915050565b60006136a160188361441b565b7f44496e7465726573743a20696e76616c69642076616c75650000000000000000815260200192915050565b60006136da601f8361441b565b7f44496e7465726573743a206d6f6e65794d61726b6574206d69736d6174636800815260200192915050565b600061371360268361441b565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b600061375b601e8361441b565b7f44496e7465726573743a20496e76616c696420746f4465706f73697449440000815260200192915050565b6000613794602d8361441b565b7f44496e7465726573743a2063757272656e744d6f6e65794d61726b6574496e6381526c06f6d65496e646578203d3d203609c1b602082015260400192915050565b60006137e3601b8361441b565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b600061381c601f8361441b565b7f44496e7465726573743a204c697374206c656e6774687320756e657175616c00815260200192915050565b6000613855600883614416565b67199959535bd9195b60c21b815260080192915050565b6000613879601383614416565b726d6f6e65794d61726b65742e7265776172647360681b815260130192915050565b60006138a860208361441b565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b60006138e160268361441b565b7f44496e7465726573743a204465706f73697420616d6f756e74206f7574206f668152652072616e676560d01b602082015260400192915050565b6000613929600d83614416565b6c1a5b9d195c995cdd135bd9195b609a1b8152600d0192915050565b6000613952601d8361441b565b7f44496e7465726573743a204465706f736974206e6f7420616374697665000000815260200192915050565b600061398b602a8361441b565b7f44496e7465726573743a204465706f736974206e6f742066756e64656420627981526908199d5b991a5b99d25160b21b602082015260400192915050565b60006139d7601d8361441b565b7f44496e7465726573743a204465706f736974206e6f74206d6174757265000000815260200192915050565b6000613a1060268361441b565b7f44496e7465726573743a204465706f73697420706572696f64206f7574206f668152652072616e676560d01b602082015260400192915050565b6000613a58601e8361441b565b7f44496e7465726573743a20696e746572657374416d6f756e74203d3d20300000815260200192915050565b6000613a9160218361441b565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000613ad460208361441b565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b6000613b0d601f8361441b565b7f44496e7465726573743a204e6f206465666963697420617661696c61626c6500815260200192915050565b6000613b46601b8361441b565b7f44496e7465726573743a20696e636f6d65496e646578203d3d20300000000000815260200192915050565b6000613b7f60288361441b565b7f44496e7465726573743a2053656e64657220646f65736e2774206f776e2064658152671c1bdcda5d13919560c21b602082015260400192915050565b6000613bc9601083614416565b6f13585e11195c1bdcda5d14195c9a5bd960821b815260100192915050565b6000613bf5601083614416565b6f135a5b91195c1bdcda5d105b5bdd5b9d60821b815260100192915050565b6000613c21601083614416565b6f135a5b91195c1bdcda5d14195c9a5bd960821b815260100192915050565b6000613c4d60228361441b565b7f44496e7465726573743a204465706f7369747320616c72656164792066756e64815261195960f21b602082015260400192915050565b6000613c9160318361441b565b7f44496e7465726573743a204465706f736974206d61747572652c2075736520778152701a5d1a191c985dca0a481a5b9cdd195859607a1b602082015260400192915050565b6000613ce460178361441b565b7f44496e7465726573743a206e6f7420636f6e7472616374000000000000000000815260200192915050565b6000613d1d600983614416565b683334bc26b4b73a32b960b91b815260090192915050565b6000613d42601083614416565b6f13585e11195c1bdcda5d105b5bdd5b9d60821b815260100192915050565b6000613d6e602a8361441b565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b6000613dba600e83614416565b6d696e7465726573744f7261636c6560901b8152600e0192915050565b6000613de4601f8361441b565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815260200192915050565b6000613e1d60228361441b565b7f44496e7465726573743a204465706f736974656420696e2073616d6520626c6f815261636b60f01b602082015260400192915050565b6000613e61601f8361441b565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b8051610120830190613e9f8482613f92565b506020820151613eb26020850182613f92565b506040820151613ec56040850182613f92565b506060820151613ed86060850182613f92565b506080820151613eeb6080850182613577565b5060a0820151613efe60a0850182613577565b5060c0820151613f1160c0850182613f92565b5060e0820151613f2460e0850182613f92565b50610100820151612d23610100850182613f92565b805160a0830190613f4a8482613f92565b506020820151613f5d6020850182613f92565b506040820151613f706040850182613f92565b506060820151613f836060850182613f92565b506080820151612d2360808501825b61356881610a75565b6000611eed8284613580565b60006118e482613848565b60006118e48261386c565b60006118e48261391c565b60006118e482613bbc565b60006118e482613be8565b60006118e482613c14565b60006118e482613d10565b60006118e482613d35565b60006118e482613dad565b602081016118e4828461356e565b60408101614026828561355f565b611eed6020830184613f92565b60608101614041828661355f565b61404e6020830185613f92565b61279e6040830184613577565b60808101614069828761355f565b6140766020830186613f92565b6140836040830185613f92565b6140906060830184613f92565b95945050505050565b604081016140a7828561356e565b611eed602083018461356e565b606081016140c2828661356e565b6140cf602083018561356e565b61279e6040830184613f92565b60408101614026828561356e565b60c081016140f8828961356e565b6141056020830188613f92565b6141126040830187613f92565b61411f6060830186613f92565b61412c6080830185613f92565b61413960a0830184613577565b979650505050505050565b602081016118e48284613577565b604081016140268285613577565b602081016118e482846135af565b6020808252810161279e8184866135b8565b60208082528101611eed81846135e4565b602080825281016118e481613612565b602080825281016118e48161364b565b602080825281016118e481613694565b602080825281016118e4816136cd565b602080825281016118e481613706565b602080825281016118e48161374e565b602080825281016118e481613787565b602080825281016118e4816137d6565b602080825281016118e48161380f565b602080825281016118e48161389b565b602080825281016118e4816138d4565b602080825281016118e481613945565b602080825281016118e48161397e565b602080825281016118e4816139ca565b602080825281016118e481613a03565b602080825281016118e481613a4b565b602080825281016118e481613a84565b602080825281016118e481613ac7565b602080825281016118e481613b00565b602080825281016118e481613b39565b602080825281016118e481613b72565b602080825281016118e481613c40565b602080825281016118e481613c84565b602080825281016118e481613cd7565b602080825281016118e481613d61565b602080825281016118e481613dd7565b602080825281016118e481613e10565b602080825281016118e481613e54565b61012081016118e48284613e8d565b60a081016118e48284613f39565b602081016118e48284613f92565b6040810161438a8286613f92565b81810360208301526140908184866135b8565b606081016143ab8286613f92565b6140cf6020830185613f92565b60a081016143c68288613f92565b6143d36020830187613f92565b6143e06040830186613f92565b6143ed6060830185613577565b6143fa6080830184613f92565b9695505050505050565b608081016140698287613f92565b5190565b919050565b90815260200190565b60006118e482614434565b151590565b6001600160a01b031690565b60006118e4825b60006118e482614424565b82818337506000910152565b60005b83811015614479578181015183820152602001614461565b83811115612d235750506000910152565b601f01601f191690565b61449d81614424565b8114611ebf57600080fd5b61449d8161442f565b61449d81610a7556fea365627a7a723158203c1382ce50d24b56cdffdd203278155cea4e6a11fc996fe3e6325774dbf611326c6578706572696d656e74616cf564736f6c63430005110040";

    public static final String FUNC_MAXDEPOSITAMOUNT = "MaxDepositAmount";

    public static final String FUNC_MAXDEPOSITPERIOD = "MaxDepositPeriod";

    public static final String FUNC_MINDEPOSITAMOUNT = "MinDepositAmount";

    public static final String FUNC_MINDEPOSITPERIOD = "MinDepositPeriod";

    public static final String FUNC_CALCULATEINTERESTAMOUNT = "calculateInterestAmount";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_DEPOSITISFUNDED = "depositIsFunded";

    public static final String FUNC_DEPOSITNFT = "depositNFT";

    public static final String FUNC_DEPOSITSLENGTH = "depositsLength";

    public static final String FUNC_EARLYWITHDRAW = "earlyWithdraw";

    public static final String FUNC_FEEMODEL = "feeModel";

    public static final String FUNC_FIXMINTER = "fixMinter";

    public static final String FUNC_FUNDALL = "fundAll";

    public static final String FUNC_FUNDMULTIPLE = "fundMultiple";

    public static final String FUNC_FUNDINGLISTLENGTH = "fundingListLength";

    public static final String FUNC_FUNDINGNFT = "fundingNFT";

    public static final String FUNC_GETDEPOSIT = "getDeposit";

    public static final String FUNC_GETFUNDING = "getFunding";

    public static final String FUNC_INTERESTMODEL = "interestModel";

    public static final String FUNC_INTERESTORACLE = "interestOracle";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_LATESTFUNDEDDEPOSITID = "latestFundedDepositID";

    public static final String FUNC_MONEYMARKET = "moneyMarket";

    public static final String FUNC_MONEYMARKETINCOMEINDEX = "moneyMarketIncomeIndex";

    public static final String FUNC_MULTIDEPOSIT = "multiDeposit";

    public static final String FUNC_MULTIEARLYWITHDRAW = "multiEarlyWithdraw";

    public static final String FUNC_MULTIWITHDRAW = "multiWithdraw";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETDEPOSITNFTBASEURI = "setDepositNFTBaseURI";

    public static final String FUNC_SETDEPOSITNFTCONTRACTURI = "setDepositNFTContractURI";

    public static final String FUNC_SETDEPOSITNFTTOKENURI = "setDepositNFTTokenURI";

    public static final String FUNC_SETFIXMINTER = "setFIXMinter";

    public static final String FUNC_SETFEEMODEL = "setFeeModel";

    public static final String FUNC_SETFUNDINGNFTBASEURI = "setFundingNFTBaseURI";

    public static final String FUNC_SETFUNDINGNFTCONTRACTURI = "setFundingNFTContractURI";

    public static final String FUNC_SETFUNDINGNFTTOKENURI = "setFundingNFTTokenURI";

    public static final String FUNC_SETINTERESTMODEL = "setInterestModel";

    public static final String FUNC_SETINTERESTORACLE = "setInterestOracle";

    public static final String FUNC_SETMAXDEPOSITAMOUNT = "setMaxDepositAmount";

    public static final String FUNC_SETMAXDEPOSITPERIOD = "setMaxDepositPeriod";

    public static final String FUNC_SETMINDEPOSITAMOUNT = "setMinDepositAmount";

    public static final String FUNC_SETMINDEPOSITPERIOD = "setMinDepositPeriod";

    public static final String FUNC_SETREWARDS = "setRewards";

    public static final String FUNC_STABLECOIN = "stablecoin";

    public static final String FUNC_SUMOFRECORDEDFUNDEDDEPOSITANDINTERESTAMOUNTDIVRECORDEDINCOMEINDEX = "sumOfRecordedFundedDepositAndInterestAmountDivRecordedIncomeIndex";

    public static final String FUNC_SURPLUS = "surplus";

    public static final String FUNC_SURPLUSOFDEPOSIT = "surplusOfDeposit";

    public static final String FUNC_TOTALDEPOSIT = "totalDeposit";

    public static final String FUNC_TOTALINTERESTOWED = "totalInterestOwed";

    public static final String FUNC_TOTALINTERESTOWEDTOFUNDERS = "totalInterestOwedToFunders";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNFUNDEDUSERDEPOSITAMOUNT = "unfundedUserDepositAmount";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event EDEPOSIT_EVENT = new Event("EDeposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EFUND_EVENT = new Event("EFund", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ESETPARAMADDRESS_EVENT = new Event("ESetParamAddress", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event ESETPARAMUINT_EVENT = new Event("ESetParamUint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EWITHDRAW_EVENT = new Event("EWithdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DInterest(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DInterest(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DInterest(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DInterest(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<EDepositEventResponse> getEDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EDEPOSIT_EVENT, transactionReceipt);
        ArrayList<EDepositEventResponse> responses = new ArrayList<EDepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EDepositEventResponse typedResponse = new EDepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.depositID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.maturationTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.interestAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.mintFIXAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EDepositEventResponse> eDepositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EDepositEventResponse>() {
            @Override
            public EDepositEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EDEPOSIT_EVENT, log);
                EDepositEventResponse typedResponse = new EDepositEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.depositID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.maturationTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.interestAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.mintFIXAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EDepositEventResponse> eDepositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EDEPOSIT_EVENT));
        return eDepositEventFlowable(filter);
    }

    public List<EFundEventResponse> getEFundEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EFUND_EVENT, transactionReceipt);
        ArrayList<EFundEventResponse> responses = new ArrayList<EFundEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EFundEventResponse typedResponse = new EFundEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.fundingID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.deficitAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EFundEventResponse> eFundEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EFundEventResponse>() {
            @Override
            public EFundEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EFUND_EVENT, log);
                EFundEventResponse typedResponse = new EFundEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.fundingID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.deficitAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EFundEventResponse> eFundEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EFUND_EVENT));
        return eFundEventFlowable(filter);
    }

    public List<ESetParamAddressEventResponse> getESetParamAddressEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ESETPARAMADDRESS_EVENT, transactionReceipt);
        ArrayList<ESetParamAddressEventResponse> responses = new ArrayList<ESetParamAddressEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ESetParamAddressEventResponse typedResponse = new ESetParamAddressEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.paramName = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newValue = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ESetParamAddressEventResponse> eSetParamAddressEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ESetParamAddressEventResponse>() {
            @Override
            public ESetParamAddressEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ESETPARAMADDRESS_EVENT, log);
                ESetParamAddressEventResponse typedResponse = new ESetParamAddressEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.paramName = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newValue = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ESetParamAddressEventResponse> eSetParamAddressEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ESETPARAMADDRESS_EVENT));
        return eSetParamAddressEventFlowable(filter);
    }

    public List<ESetParamUintEventResponse> getESetParamUintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ESETPARAMUINT_EVENT, transactionReceipt);
        ArrayList<ESetParamUintEventResponse> responses = new ArrayList<ESetParamUintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ESetParamUintEventResponse typedResponse = new ESetParamUintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.paramName = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newValue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ESetParamUintEventResponse> eSetParamUintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ESetParamUintEventResponse>() {
            @Override
            public ESetParamUintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ESETPARAMUINT_EVENT, log);
                ESetParamUintEventResponse typedResponse = new ESetParamUintEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.paramName = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newValue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ESetParamUintEventResponse> eSetParamUintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ESETPARAMUINT_EVENT));
        return eSetParamUintEventFlowable(filter);
    }

    public List<EWithdrawEventResponse> getEWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EWITHDRAW_EVENT, transactionReceipt);
        ArrayList<EWithdrawEventResponse> responses = new ArrayList<EWithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EWithdrawEventResponse typedResponse = new EWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.depositID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.fundingID = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.early = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.takeBackFIXAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EWithdrawEventResponse> eWithdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EWithdrawEventResponse>() {
            @Override
            public EWithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EWITHDRAW_EVENT, log);
                EWithdrawEventResponse typedResponse = new EWithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.depositID = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.fundingID = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.early = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.takeBackFIXAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EWithdrawEventResponse> eWithdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EWITHDRAW_EVENT));
        return eWithdrawEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> MaxDepositAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXDEPOSITAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MaxDepositPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXDEPOSITPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MinDepositAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINDEPOSITAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MinDepositPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINDEPOSITPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> calculateInterestAmount(BigInteger depositAmount, BigInteger depositPeriodInSeconds) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CALCULATEINTERESTAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(depositAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(depositPeriodInSeconds)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(BigInteger amount, BigInteger maturationTimestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(maturationTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> depositIsFunded(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEPOSITISFUNDED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> depositNFT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEPOSITNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> depositsLength() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEPOSITSLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> earlyWithdraw(BigInteger depositID, BigInteger fundingID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EARLYWITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(depositID), 
                new org.web3j.abi.datatypes.generated.Uint256(fundingID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> feeModel() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FEEMODEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> fixMinter() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FIXMINTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> fundAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FUNDALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> fundMultiple(BigInteger toDepositID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FUNDMULTIPLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(toDepositID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> fundingListLength() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FUNDINGLISTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> fundingNFT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FUNDINGNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Deposit> getDeposit(BigInteger depositID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(depositID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Deposit>() {}));
        return executeRemoteCallSingleValueReturn(function, Deposit.class);
    }

    public RemoteFunctionCall<Funding> getFunding(BigInteger fundingID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFUNDING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(fundingID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Funding>() {}));
        return executeRemoteCallSingleValueReturn(function, Funding.class);
    }

    public RemoteFunctionCall<String> interestModel() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INTERESTMODEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> interestOracle() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INTERESTORACLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> latestFundedDepositID() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTFUNDEDDEPOSITID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> moneyMarket() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MONEYMARKET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> moneyMarketIncomeIndex() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MONEYMARKETINCOMEINDEX, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> multiDeposit(List<BigInteger> amountList, List<BigInteger> maturationTimestampList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MULTIDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amountList, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(maturationTimestampList, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> multiEarlyWithdraw(List<BigInteger> depositIDList, List<BigInteger> fundingIDList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MULTIEARLYWITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(depositIDList, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(fundingIDList, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> multiWithdraw(List<BigInteger> depositIDList, List<BigInteger> fundingIDList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MULTIWITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(depositIDList, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(fundingIDList, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDepositNFTBaseURI(String newURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDEPOSITNFTBASEURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDepositNFTContractURI(String newURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDEPOSITNFTCONTRACTURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDepositNFTTokenURI(BigInteger tokenId, String newURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDEPOSITNFTTOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(newURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFIXMinter(String newValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFIXMINTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeModel(String newValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFEEMODEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFundingNFTBaseURI(String newURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFUNDINGNFTBASEURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFundingNFTContractURI(String newURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFUNDINGNFTCONTRACTURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFundingNFTTokenURI(BigInteger tokenId, String newURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFUNDINGNFTTOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(newURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setInterestModel(String newValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETINTERESTMODEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setInterestOracle(String newValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETINTERESTORACLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaxDepositAmount(BigInteger newValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMAXDEPOSITAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaxDepositPeriod(BigInteger newValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMAXDEPOSITPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMinDepositAmount(BigInteger newValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMINDEPOSITAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMinDepositPeriod(BigInteger newValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMINDEPOSITPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRewards(String newValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREWARDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> stablecoin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STABLECOIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> sumOfRecordedFundedDepositAndInterestAmountDivRecordedIncomeIndex() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUMOFRECORDEDFUNDEDDEPOSITANDINTERESTAMOUNTDIVRECORDEDINCOMEINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> surplus() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SURPLUS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> surplusOfDeposit(BigInteger depositID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SURPLUSOFDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(depositID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalDeposit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalInterestOwed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALINTERESTOWED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> totalInterestOwedToFunders() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALINTERESTOWEDTOFUNDERS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> unfundedUserDepositAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UNFUNDEDUSERDEPOSITAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger depositID, BigInteger fundingID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(depositID), 
                new org.web3j.abi.datatypes.generated.Uint256(fundingID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DInterest load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DInterest(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DInterest load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DInterest(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DInterest load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DInterest(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DInterest load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DInterest(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DInterest> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, DepositLimit _depositLimit, String _moneyMarket, String _stablecoin, String _feeModel, String _interestModel, String _interestOracle, String _depositNFT, String _fundingNFT, String _fixMinter) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_depositLimit, 
                new org.web3j.abi.datatypes.Address(_moneyMarket), 
                new org.web3j.abi.datatypes.Address(_stablecoin), 
                new org.web3j.abi.datatypes.Address(_feeModel), 
                new org.web3j.abi.datatypes.Address(_interestModel), 
                new org.web3j.abi.datatypes.Address(_interestOracle), 
                new org.web3j.abi.datatypes.Address(_depositNFT), 
                new org.web3j.abi.datatypes.Address(_fundingNFT), 
                new org.web3j.abi.datatypes.Address(_fixMinter)));
        return deployRemoteCall(DInterest.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DInterest> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, DepositLimit _depositLimit, String _moneyMarket, String _stablecoin, String _feeModel, String _interestModel, String _interestOracle, String _depositNFT, String _fundingNFT, String _fixMinter) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_depositLimit, 
                new org.web3j.abi.datatypes.Address(_moneyMarket), 
                new org.web3j.abi.datatypes.Address(_stablecoin), 
                new org.web3j.abi.datatypes.Address(_feeModel), 
                new org.web3j.abi.datatypes.Address(_interestModel), 
                new org.web3j.abi.datatypes.Address(_interestOracle), 
                new org.web3j.abi.datatypes.Address(_depositNFT), 
                new org.web3j.abi.datatypes.Address(_fundingNFT), 
                new org.web3j.abi.datatypes.Address(_fixMinter)));
        return deployRemoteCall(DInterest.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DInterest> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, DepositLimit _depositLimit, String _moneyMarket, String _stablecoin, String _feeModel, String _interestModel, String _interestOracle, String _depositNFT, String _fundingNFT, String _fixMinter) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_depositLimit, 
                new org.web3j.abi.datatypes.Address(_moneyMarket), 
                new org.web3j.abi.datatypes.Address(_stablecoin), 
                new org.web3j.abi.datatypes.Address(_feeModel), 
                new org.web3j.abi.datatypes.Address(_interestModel), 
                new org.web3j.abi.datatypes.Address(_interestOracle), 
                new org.web3j.abi.datatypes.Address(_depositNFT), 
                new org.web3j.abi.datatypes.Address(_fundingNFT), 
                new org.web3j.abi.datatypes.Address(_fixMinter)));
        return deployRemoteCall(DInterest.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DInterest> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, DepositLimit _depositLimit, String _moneyMarket, String _stablecoin, String _feeModel, String _interestModel, String _interestOracle, String _depositNFT, String _fundingNFT, String _fixMinter) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_depositLimit, 
                new org.web3j.abi.datatypes.Address(_moneyMarket), 
                new org.web3j.abi.datatypes.Address(_stablecoin), 
                new org.web3j.abi.datatypes.Address(_feeModel), 
                new org.web3j.abi.datatypes.Address(_interestModel), 
                new org.web3j.abi.datatypes.Address(_interestOracle), 
                new org.web3j.abi.datatypes.Address(_depositNFT), 
                new org.web3j.abi.datatypes.Address(_fundingNFT), 
                new org.web3j.abi.datatypes.Address(_fixMinter)));
        return deployRemoteCall(DInterest.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositLimit extends StaticStruct {
        public BigInteger MinDepositPeriod;

        public BigInteger MaxDepositPeriod;

        public BigInteger MinDepositAmount;

        public BigInteger MaxDepositAmount;

        public DepositLimit(BigInteger MinDepositPeriod, BigInteger MaxDepositPeriod, BigInteger MinDepositAmount, BigInteger MaxDepositAmount) {
            super(new org.web3j.abi.datatypes.generated.Uint256(MinDepositPeriod),new org.web3j.abi.datatypes.generated.Uint256(MaxDepositPeriod),new org.web3j.abi.datatypes.generated.Uint256(MinDepositAmount),new org.web3j.abi.datatypes.generated.Uint256(MaxDepositAmount));
            this.MinDepositPeriod = MinDepositPeriod;
            this.MaxDepositPeriod = MaxDepositPeriod;
            this.MinDepositAmount = MinDepositAmount;
            this.MaxDepositAmount = MaxDepositAmount;
        }

        public DepositLimit(Uint256 MinDepositPeriod, Uint256 MaxDepositPeriod, Uint256 MinDepositAmount, Uint256 MaxDepositAmount) {
            super(MinDepositPeriod,MaxDepositPeriod,MinDepositAmount,MaxDepositAmount);
            this.MinDepositPeriod = MinDepositPeriod.getValue();
            this.MaxDepositPeriod = MaxDepositPeriod.getValue();
            this.MinDepositAmount = MinDepositAmount.getValue();
            this.MaxDepositAmount = MaxDepositAmount.getValue();
        }
    }

    public static class Deposit extends StaticStruct {
        public BigInteger amount;

        public BigInteger maturationTimestamp;

        public BigInteger interestOwed;

        public BigInteger initialMoneyMarketIncomeIndex;

        public Boolean active;

        public Boolean finalSurplusIsNegative;

        public BigInteger finalSurplusAmount;

        public BigInteger mintFIXAmount;

        public BigInteger depositTimestamp;

        public Deposit(BigInteger amount, BigInteger maturationTimestamp, BigInteger interestOwed, BigInteger initialMoneyMarketIncomeIndex, Boolean active, Boolean finalSurplusIsNegative, BigInteger finalSurplusAmount, BigInteger mintFIXAmount, BigInteger depositTimestamp) {
            super(new org.web3j.abi.datatypes.generated.Uint256(amount),new org.web3j.abi.datatypes.generated.Uint256(maturationTimestamp),new org.web3j.abi.datatypes.generated.Uint256(interestOwed),new org.web3j.abi.datatypes.generated.Uint256(initialMoneyMarketIncomeIndex),new org.web3j.abi.datatypes.Bool(active),new org.web3j.abi.datatypes.Bool(finalSurplusIsNegative),new org.web3j.abi.datatypes.generated.Uint256(finalSurplusAmount),new org.web3j.abi.datatypes.generated.Uint256(mintFIXAmount),new org.web3j.abi.datatypes.generated.Uint256(depositTimestamp));
            this.amount = amount;
            this.maturationTimestamp = maturationTimestamp;
            this.interestOwed = interestOwed;
            this.initialMoneyMarketIncomeIndex = initialMoneyMarketIncomeIndex;
            this.active = active;
            this.finalSurplusIsNegative = finalSurplusIsNegative;
            this.finalSurplusAmount = finalSurplusAmount;
            this.mintFIXAmount = mintFIXAmount;
            this.depositTimestamp = depositTimestamp;
        }

        public Deposit(Uint256 amount, Uint256 maturationTimestamp, Uint256 interestOwed, Uint256 initialMoneyMarketIncomeIndex, Bool active, Bool finalSurplusIsNegative, Uint256 finalSurplusAmount, Uint256 mintFIXAmount, Uint256 depositTimestamp) {
            super(amount,maturationTimestamp,interestOwed,initialMoneyMarketIncomeIndex,active,finalSurplusIsNegative,finalSurplusAmount,mintFIXAmount,depositTimestamp);
            this.amount = amount.getValue();
            this.maturationTimestamp = maturationTimestamp.getValue();
            this.interestOwed = interestOwed.getValue();
            this.initialMoneyMarketIncomeIndex = initialMoneyMarketIncomeIndex.getValue();
            this.active = active.getValue();
            this.finalSurplusIsNegative = finalSurplusIsNegative.getValue();
            this.finalSurplusAmount = finalSurplusAmount.getValue();
            this.mintFIXAmount = mintFIXAmount.getValue();
            this.depositTimestamp = depositTimestamp.getValue();
        }
    }

    public static class Funding extends StaticStruct {
        public BigInteger fromDepositID;

        public BigInteger toDepositID;

        public BigInteger recordedFundedDepositAmount;

        public BigInteger recordedMoneyMarketIncomeIndex;

        public BigInteger creationTimestamp;

        public Funding(BigInteger fromDepositID, BigInteger toDepositID, BigInteger recordedFundedDepositAmount, BigInteger recordedMoneyMarketIncomeIndex, BigInteger creationTimestamp) {
            super(new org.web3j.abi.datatypes.generated.Uint256(fromDepositID),new org.web3j.abi.datatypes.generated.Uint256(toDepositID),new org.web3j.abi.datatypes.generated.Uint256(recordedFundedDepositAmount),new org.web3j.abi.datatypes.generated.Uint256(recordedMoneyMarketIncomeIndex),new org.web3j.abi.datatypes.generated.Uint256(creationTimestamp));
            this.fromDepositID = fromDepositID;
            this.toDepositID = toDepositID;
            this.recordedFundedDepositAmount = recordedFundedDepositAmount;
            this.recordedMoneyMarketIncomeIndex = recordedMoneyMarketIncomeIndex;
            this.creationTimestamp = creationTimestamp;
        }

        public Funding(Uint256 fromDepositID, Uint256 toDepositID, Uint256 recordedFundedDepositAmount, Uint256 recordedMoneyMarketIncomeIndex, Uint256 creationTimestamp) {
            super(fromDepositID,toDepositID,recordedFundedDepositAmount,recordedMoneyMarketIncomeIndex,creationTimestamp);
            this.fromDepositID = fromDepositID.getValue();
            this.toDepositID = toDepositID.getValue();
            this.recordedFundedDepositAmount = recordedFundedDepositAmount.getValue();
            this.recordedMoneyMarketIncomeIndex = recordedMoneyMarketIncomeIndex.getValue();
            this.creationTimestamp = creationTimestamp.getValue();
        }
    }

    public static class EDepositEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger depositID;

        public BigInteger amount;

        public BigInteger maturationTimestamp;

        public BigInteger interestAmount;

        public BigInteger mintFIXAmount;
    }

    public static class EFundEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger fundingID;

        public BigInteger deficitAmount;
    }

    public static class ESetParamAddressEventResponse extends BaseEventResponse {
        public String sender;

        public byte[] paramName;

        public String newValue;
    }

    public static class ESetParamUintEventResponse extends BaseEventResponse {
        public String sender;

        public byte[] paramName;

        public BigInteger newValue;
    }

    public static class EWithdrawEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger depositID;

        public BigInteger fundingID;

        public Boolean early;

        public BigInteger takeBackFIXAmount;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
